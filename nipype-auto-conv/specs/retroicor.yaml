# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.preprocess.Retroicor' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Inputs
# ------
# in_file : file
#    input file to 3dretroicor
# out_file : file
#    output image file name
# card : file
#    1D cardiac data file for cardiac correction
# resp : file
#    1D respiratory waveform data for correction
# threshold : int
#    Threshold for detection of R-wave peaks in input (Make sure it is above the background noise level, Try 3/4 or 4/5 times range plus minimum)
# order : int
#    The order of the correction (2 is typical)
# cardphase : file
#    Filename for 1D cardiac phase output
# respphase : file
#    Filename for 1D resp phase output
# num_threads : int
#    set number of threads
# outputtype : enum
#    AFNI output filetype
# args : str
#    Additional parameters to the command
# environ : dict
#    Environment variables
#
# Outputs
# -------
# out_file : file
#    output file
#
# Docs
# ----
# Performs Retrospective Image Correction for physiological
#     motion effects, using a slightly modified version of the
#     RETROICOR algorithm
# 
#     The durations of the physiological inputs are assumed to equal
#     the duration of the dataset. Any constant sampling rate may be
#     used, but 40 Hz seems to be acceptable. This program's cardiac
#     peak detection algorithm is rather simplistic, so you might try
#     using the scanner's cardiac gating output (transform it to a
#     spike wave if necessary).
# 
#     This program uses slice timing information embedded in the
#     dataset to estimate the proper cardiac/respiratory phase for
#     each slice. It makes sense to run this program before any
#     program that may destroy the slice timings (e.g. 3dvolreg for
#     motion correction).
# 
#     For complete details, see the `3dretroicor Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dretroicor.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> ret = afni.Retroicor()
#     >>> ret.inputs.in_file = 'functional.nii'
#     >>> ret.inputs.card = 'mask.1D'
#     >>> ret.inputs.resp = 'resp.1D'
#     >>> ret.inputs.outputtype = 'NIFTI'
#     >>> ret.cmdline
#     '3dretroicor -prefix functional_retroicor.nii -resp resp.1D -card mask.1D functional.nii'
#     >>> res = ret.run()  # doctest: +SKIP
# 
#     
task_name: retroicor
nipype_name: Retroicor
nipype_module: nipype.interfaces.afni.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    out_file: generic/file
    card: generic/file
    resp: generic/file
    cardphase: generic/file
    respphase: generic/file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    card:
    resp:
    outputtype: '"NIFTI"'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dretroicor -prefix functional_retroicor.nii -resp resp.1D -card mask.1D functional.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    card:
    resp:
    outputtype: '"NIFTI"'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
