# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.preprocess.ECM' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Inputs
# ------
# in_file : file
#    input file to 3dECM
# sparsity : float
#    only take the top percent of connections
# full : bool
#    Full power method; enables thresholding; automatically selected if -thresh or -sparsity are set
# fecm : bool
#    Fast centrality method; substantial speed increase but cannot accommodate thresholding; automatically selected if -thresh or -sparsity are not set
# shift : float
#    shift correlation coefficients in similarity matrix to enforce non-negativity, s >= 0.0; default = 0.0 for -full, 1.0 for -fecm
# scale : float
#    scale correlation coefficients in similarity matrix to after shifting, x >= 0.0; default = 1.0 for -full, 0.5 for -fecm
# eps : float
#    sets the stopping criterion for the power iteration; :math:`l2\|v_\text{old} - v_\text{new}\| < eps\|v_\text{old}\|`; default = 0.001
# max_iter : int
#    sets the maximum number of iterations to use in the power iteration; default = 1000
# memory : float
#    Limit memory consumption on system by setting the amount of GB to limit the algorithm to; default = 2GB
# mask : file
#    mask file to mask input data
# thresh : float
#    threshold to exclude connections where corr <= thresh
# polort : int
#    
# autoclip : bool
#    Clip off low-intensity regions in the dataset
# automask : bool
#    Mask the dataset to target brain-only voxels
# num_threads : int
#    set number of threads
# outputtype : enum
#    AFNI output filetype
# out_file : file
#    output image file name
# args : str
#    Additional parameters to the command
# environ : dict
#    Environment variables
#
# Outputs
# -------
# out_file : file
#    output file
#
# Docs
# ----
# Performs degree centrality on a dataset using a given maskfile
#     via the 3dECM command
# 
#     For complete details, see the `3dECM Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dECM.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> ecm = afni.ECM()
#     >>> ecm.inputs.in_file = 'functional.nii'
#     >>> ecm.inputs.mask = 'mask.nii'
#     >>> ecm.inputs.sparsity = 0.1 # keep top 0.1% of connections
#     >>> ecm.inputs.out_file = 'out.nii'
#     >>> ecm.cmdline
#     '3dECM -mask mask.nii -prefix out.nii -sparsity 0.100000 functional.nii'
#     >>> res = ecm.run()  # doctest: +SKIP
# 
#     
task_name: e_c_m
nipype_name: ECM
nipype_module: nipype.interfaces.afni.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    mask: medimage/nifti1
    out_file: medimage/nifti1
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: medimage/nifti1
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    mask:
    sparsity: '0.1 # keep top 0.1% of connections'
    out_file:
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dECM -mask mask.nii -prefix out.nii -sparsity 0.100000 functional.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    mask:
    sparsity: '0.1 # keep top 0.1% of connections'
    out_file:
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
