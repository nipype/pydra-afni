# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.preprocess.Volreg' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Inputs
# ------
# in_file : file
#    input file to 3dvolreg
# in_weight_volume : traitcompound
#    weights for each voxel specified by a file with an optional volume number (defaults to 0)
# out_file : file
#    output image file name
# basefile : file
#    base file for registration
# zpad : int
#    Zeropad around the edges by 'n' voxels during rotations
# md1d_file : file
#    max displacement output file
# oned_file : file
#    1D movement parameters output file
# verbose : bool
#    more detailed description of the process
# timeshift : bool
#    time shift to mean slice time offset
# copyorigin : bool
#    copy base file origin coords to output
# oned_matrix_save : file
#    Save the matrix transformation
# interp : enum
#    spatial interpolation methods [default = heptic]
# num_threads : int
#    set number of threads
# outputtype : enum
#    AFNI output filetype
# args : str
#    Additional parameters to the command
# environ : dict
#    Environment variables
#
# Outputs
# -------
# out_file : file
#    registered file
# md1d_file : file
#    max displacement info file
# oned_file : file
#    movement parameters info file
# oned_matrix_save : file
#    matrix transformation from base to input
#
# Docs
# ----
# Register input volumes to a base volume using AFNI 3dvolreg command
# 
#     For complete details, see the `3dvolreg Documentation.
#     <https://afni.nimh.nih.gov/pub/dist/doc/program_help/3dvolreg.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> volreg = afni.Volreg()
#     >>> volreg.inputs.in_file = 'functional.nii'
#     >>> volreg.inputs.args = '-Fourier -twopass'
#     >>> volreg.inputs.zpad = 4
#     >>> volreg.inputs.outputtype = 'NIFTI'
#     >>> volreg.cmdline  # doctest: +ELLIPSIS
#     '3dvolreg -Fourier -twopass -1Dfile functional.1D -1Dmatrix_save functional.aff12.1D -prefix functional_volreg.nii -zpad 4 -maxdisp1D functional_md.1D functional.nii'
#     >>> res = volreg.run()  # doctest: +SKIP
# 
#     >>> from nipype.interfaces import afni
#     >>> volreg = afni.Volreg()
#     >>> volreg.inputs.in_file = 'functional.nii'
#     >>> volreg.inputs.interp = 'cubic'
#     >>> volreg.inputs.verbose = True
#     >>> volreg.inputs.zpad = 1
#     >>> volreg.inputs.basefile = 'functional.nii'
#     >>> volreg.inputs.out_file = 'rm.epi.volreg.r1'
#     >>> volreg.inputs.oned_file = 'dfile.r1.1D'
#     >>> volreg.inputs.oned_matrix_save = 'mat.r1.tshift+orig.1D'
#     >>> volreg.cmdline
#     '3dvolreg -cubic -1Dfile dfile.r1.1D -1Dmatrix_save mat.r1.tshift+orig.1D -prefix rm.epi.volreg.r1 -verbose -base functional.nii -zpad 1 -maxdisp1D functional_md.1D functional.nii'
#     >>> res = volreg.run()  # doctest: +SKIP
# 
#     
task_name: volreg
nipype_name: Volreg
nipype_module: nipype.interfaces.afni.preprocess
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1
    out_file: generic/file
    basefile: medimage/nifti1
    md1d_file: generic/file
    oned_file: generic/file
    oned_matrix_save: generic/file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
    md1d_file: generic/file
    oned_file: generic/file
    oned_matrix_save: generic/file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    args: '"-Fourier -twopass"'
    zpad: '4'
    outputtype: '"NIFTI"'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    interp: '"cubic"'
    verbose: 'True'
    zpad: '1'
    basefile:
    out_file:
    oned_file:
    oned_matrix_save:
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dvolreg -Fourier -twopass -1Dfile functional.1D -1Dmatrix_save functional.aff12.1D -prefix functional_volreg.nii -zpad 4 -maxdisp1D functional_md.1D functional.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    args: '"-Fourier -twopass"'
    zpad: '4'
    outputtype: '"NIFTI"'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
- cmdline: 3dvolreg -cubic -1Dfile dfile.r1.1D -1Dmatrix_save mat.r1.tshift+orig.1D -prefix rm.epi.volreg.r1 -verbose -base functional.nii -zpad 1 -maxdisp1D functional_md.1D functional.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    interp: '"cubic"'
    verbose: 'True'
    zpad: '1'
    basefile:
    out_file:
    oned_file:
    oned_matrix_save:
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
